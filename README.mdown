## Ducksboard API Ruby wrapper

[![Code Climate](https://codeclimate.com/github/jhsu/ducksboard.png)](https://codeclimate.com/github/jhsu/ducksboard)
[![Build Status](https://travis-ci.org/jhsu/ducksboard.png?branch=simple-slot-push)](https://travis-ci.org/jhsu/ducksboard)

### Configuration

API Key can be set in the environment (such as `~/.bashrc`).

    export DUCKSBOARD_API_KEY='YOURKEY'

or in an initializer (such as `config/initializers/ducksboard.rb`)

    Ducksboard.api_key = 'YOURKEY'

### Sending Data (Push API)

Data can be sent to slots in formats specified in the [Ducksboard API
documentation](http://dev.ducksboard.com/apidoc/slot-kinds).

```ruby
# Update the value a slot (ie. counter)
slot = Ducksboard::Slot.new(123)
slot.update(:value => 20)

# Update a leaderboard
slot = Ducksboard::Slot.new("leaderboard")
slot.update(:value => {
  :boards => [
    {:name => "person 1", values => [123, 24.5]},
    {:name => "person 2", values => [224, 21.0]}
  ]
})
```

### Pulling Data (Pull API)

Fetching data from a slot on Ducksboard. Several convinience methods are
provided to fetch data through the [Ducksboard HTTP Pull
API](http://dev.ducksboard.com/apidoc/pull-api-http/#resource-endpoints). Each
pull returns a hash of data with a data at `response['data']`.

```ruby
slot = Ducksboard::Slot.new(123)
slot.last(:count => 15)

slot.since(:seconds => 5 * 60)

slot.timespan(:timespan => "weekly", :timezone => "UTC")
```


### TODO

- [ ] Would like some integration tests that actually hit the real API
